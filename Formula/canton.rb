class Canton < Formula
  desc "Canton blockchain protocol implementation from Digital Asset"
  homepage "https://www.canton.network/"
  license "Apache-2.0"

  # Support both stable releases and snapshot versions
  if build.head?
    # HEAD builds use the latest snapshot from GitHub API (no URL needed for head)
    head "https://github.com/digital-asset/daml.git", branch: "main"
  else
    # Use local file for testing
    # url "file:///Users/allen/0xbigboss/canton-network/canton-foundation/canton-local-test.tar.gz"
    url "https://github.com/digital-asset/daml/releases/download/v3.4.0-snapshot.20250710.0/canton-open-source-3.4.0-snapshot.20250707.16366.0.vf80131e0.tar.gz"
    sha256 "395d51792fbd1ac38e21754cf21a3cde094a149218707c00e0e0ab0a67aa3a8d"  # Skip checksum for local testing
    version "3.4.0-snapshot.20250707.16366.0.vf80131e0"
  end

  # Java 11+ is required (recommend 17 for best compatibility)
  depends_on "openjdk@17" => :recommended

  def install
    if build.head?
      install_latest_snapshot
    else
      install_release
    end
  end

  def install_release
    # Install the full release structure
    # The tar.gz already has the correct structure after stripping top-level dir
    prefix.install Dir["*"]
    # Create symlink in Homebrew's bin directory
    # bin.install_symlink prefix/"bin/canton"
  end

  def install_latest_snapshot
    # Fetch latest snapshot release from GitHub API
    require "json"
    require "open-uri"

    releases_url = "https://api.github.com/repos/digital-asset/daml/releases"

    begin
      releases_data = URI.open(releases_url).read
      releases = JSON.parse(releases_data)
    rescue => e
      odie "Failed to fetch releases from GitHub API: #{e.message}"
    end

    # Find the latest snapshot release (prerelease=true)
    snapshot_release = releases.find do |release|
      release["prerelease"] == true &&
      release["assets"].any? { |asset| asset["name"].match(/canton-open-source.*\.tar\.gz$/) }
    end

    if snapshot_release.nil?
      odie "No snapshot releases found with canton-open-source assets"
    end

    # Find the canton-open-source asset
    canton_asset = snapshot_release["assets"].find do |asset|
      asset["name"].match(/canton-open-source.*\.tar\.gz$/)
    end

    if canton_asset.nil?
      odie "No canton-open-source tar.gz found in latest snapshot"
    end

    download_url = canton_asset["browser_download_url"]
    asset_name = canton_asset["name"]

    ohai "Downloading latest snapshot: #{asset_name}"
    ohai "From: #{download_url}"

    # Download the snapshot release
    system "curl", "-L", "-o", asset_name, download_url

    unless $?.success?
      odie "Failed to download #{asset_name}"
    end

    # Extract with strip-components=1 to remove top-level directory
    system "tar", "xzf", asset_name, "--strip-components=1"

    unless $?.success?
      odie "Failed to extract #{asset_name}"
    end

    # Install the extracted files
    prefix.install Dir["*"]

    # Create a Unix shell script to launch Canton JAR since newer releases don't include one
    create_canton_launcher

    # Create symlink in Homebrew's bin directory
    bin.install_symlink prefix/"bin/canton"

    # Clean up the downloaded tar.gz
    rm_f asset_name
  end

  def create_canton_launcher
    # Find the Canton JAR file
    ohai "DEBUG: Looking for JAR files in #{prefix}/lib/"
    system "ls", "-la", "#{prefix}/lib/"

    jar_files = Dir[prefix/"lib/canton-open-source-*.jar"]
    ohai "DEBUG: Found JAR files: #{jar_files.inspect}"

    if jar_files.empty?
      odie "No Canton JAR file found in #{prefix}/lib/"
    end

    jar_file = jar_files.first
    jar_name = File.basename(jar_file)
    ohai "DEBUG: Using JAR file: #{jar_name}"

    # Create the launcher script
    launcher_content = <<~EOS
      #!/bin/bash

      # Canton Launcher Script (generated by Homebrew)

      # Find Java executable
      if [ -n "$JAVA_HOME" ]; then
          JAVA="$JAVA_HOME/bin/java"
      else
          JAVA=$(which java)
      fi

      if [ -z "$JAVA" ]; then
          echo "Error: Java not found. Please install Java 11+ or set JAVA_HOME" >&2
          exit 1
      fi

      # Check Java version (requires 11+)
      JAVA_VERSION=$($JAVA -version 2>&1 | head -n1 | cut -d'"' -f2 | cut -d'.' -f1)
      if [ "$JAVA_VERSION" -lt 11 ] 2>/dev/null; then
          echo "Error: Java 11 or later is required. Found version: $JAVA_VERSION" >&2
          exit 1
      fi

      # Canton installation directory
      CANTON_HOME="#{prefix}"
      CANTON_JAR="$CANTON_HOME/lib/#{jar_name}"

      # Launch Canton with all arguments passed through
      exec "$JAVA" -jar "$CANTON_JAR" "$@"
    EOS

    # Write the launcher script
    (prefix/"bin").mkpath
    launcher_path = prefix/"bin/canton"
    File.write(launcher_path, launcher_content)

    # Make it executable
    chmod 0755, launcher_path
  end

  def caveats
    <<~EOS
      Canton requires Java 11 or later. You may need to set JAVA_HOME:
        export JAVA_HOME=$(/usr/libexec/java_home -v 11)

      Or if using Homebrew's OpenJDK:
        export JAVA_HOME="#{Formula["openjdk@17"].opt_prefix}/libexec/openjdk.jdk/Contents/Home"

      Configuration files are available at:
        #{prefix}/config/

      Examples are available at:
        #{prefix}/examples/

      Documentation is available at:
        #{prefix}/docs/
    EOS
  end

  test do
    # Test that the binary exists and is executable
    assert_predicate bin/"canton", :exist?
    assert_predicate bin/"canton", :executable?

    # Test that Java is available (required for Canton to run)
    java_version = shell_output("java -version 2>&1")
    assert_match(/version "(1\.[8-9]|[1-9][0-9])\.|version "[1-9][0-9]"/, java_version)

    # Test that Canton can show help (basic functionality test)
    output = shell_output("#{bin}/canton --help 2>&1", 0)
    assert_match(/Canton/, output)
  end
end
