name: Update Canton Version Manifest

on:
  schedule:
    # Run every 12 hours
    - cron: "0 */12 * * *"
  workflow_dispatch: # Allow manual triggering
  push:
    branches:
      - main
    paths:
      - 'scripts/**'
      - '.github/workflows/update-canton.yml'

jobs:
  update-manifest:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          fetch-tags: true

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install GitHub CLI
        run: |
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          else
            echo "GitHub CLI already installed"
          fi

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update canton-versions.json manifest
        id: update-manifest
        run: |
          echo "📦 Updating Canton version manifest..."
          
          # Generate manifest with top 20 releases
          bun run scripts/generate-version-manifest.ts 20
          
          # Check if manifest was modified
          if git diff --quiet canton-versions.json; then
            echo "✅ Manifest is already up to date"
            echo "manifest_updated=false" >> $GITHUB_OUTPUT
          else
            echo "📝 Manifest was updated with new versions"
            echo "manifest_updated=true" >> $GITHUB_OUTPUT
            
            # Show what changed
            echo "Changes:"
            git diff --stat canton-versions.json
          fi

      - name: Verify SHA256 hashes
        if: steps.update-manifest.outputs.manifest_updated == 'true'
        run: |
          echo "🔐 Verifying SHA256 hashes in manifest..."
          bun run scripts/verify-sha256.ts 3

      - name: Update main formula SHA256
        if: steps.update-manifest.outputs.manifest_updated == 'true'
        id: update-formula
        run: |
          echo "📝 Updating main formula with latest SHA256..."
          bun run scripts/update-main-formula-sha256.ts

      - name: Create versioned formulas for new releases
        if: steps.update-manifest.outputs.manifest_updated == 'true'
        run: |
          echo "🏗️ Creating versioned formulas for new releases..."
          bun run scripts/create-new-formulas.ts 5

      - name: Commit and push changes
        if: steps.update-manifest.outputs.manifest_updated == 'true'
        run: |
          # Add all changes
          git add canton-versions.json
          git add Formula/canton.rb
          git add Formula/canton@*.rb 2>/dev/null || true
          
          # Check if there are changes to commit
          if ! git diff --cached --quiet; then
            # Get summary of changes
            NEW_VERSIONS=$(git diff --cached canton-versions.json | grep '^+.*"v3\.' | wc -l || echo "0")
            
            # Create commit message
            COMMIT_MSG="chore: update Canton version manifest and formulas

- Updated canton-versions.json with new versions
- Verified SHA256 hashes for latest releases  
- Updated main formula SHA256
- Generated versioned formulas for new releases

🤖 Generated by GitHub Actions [skip ci]"
            git commit -m "$COMMIT_MSG"
            
            git push
            echo "✅ Changes pushed to repository"
          else
            echo "ℹ️ No changes to commit"
          fi

      - name: Create tagged releases for new Canton versions
        if: steps.update-manifest.outputs.manifest_updated == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🏷️ Creating tagged releases for new Canton versions..."
          
          # Get existing tags
          EXISTING_TAGS=$(git tag -l "canton-*" | tr '\n' ' ')
          echo "Existing tags: $EXISTING_TAGS"
          
          # Process versions from manifest
          bun -e '
            const manifest = require("./canton-versions.json");
            const { execSync } = require("child_process");
            
            // Check top 5 versions for new tags
            const versions = Object.entries(manifest.versions).slice(0, 5);
            let createdTags = [];
            
            for (const [damlTag, info] of versions) {
              const tagName = `canton-${damlTag}-${info.canton_version}`;
              
              try {
                // Check if tag exists
                execSync(`git rev-parse --verify refs/tags/${tagName}`, { stdio: "ignore" });
                console.log(`Tag ${tagName} already exists`);
              } catch {
                // Tag does not exist, create it
                console.log(`Creating tag: ${tagName}`);
                
                try {
                  // Create and push tag
                  execSync(`git tag ${tagName}`);
                  execSync(`git push origin ${tagName}`);
                  createdTags.push({ tag: tagName, damlTag, info });
                  console.log(`✅ Created tag: ${tagName}`);
                } catch (error) {
                  console.error(`❌ Failed to create tag ${tagName}: ${error.message}`);
                }
              }
            }
            
            // Create GitHub releases for new tags
            for (const { tag, damlTag, info } of createdTags) {
              const releaseTitle = `Canton ${info.canton_version} (DAML ${damlTag})`;
              const isPrerelease = info.is_prerelease ? "--prerelease" : "";
              
              // Create release notes file
              const releaseNotes = `Homebrew formula for Canton version ${info.canton_version} from DAML release ${damlTag}.

This release tracks the Canton release from Digital Asset:
- DAML Release: ${damlTag}
- Canton Version: ${info.canton_version}
- SHA256: ${info.sha256}
- Type: ${info.is_prerelease ? "Pre-release" : "Stable"}

## Installation

\`\`\`bash
# Using tap
brew tap 0xsend/homebrew-canton
brew install canton@${damlTag.replace(/^v/, "")}

# Or directly
brew install 0xsend/homebrew-canton/canton@${damlTag.replace(/^v/, "")}
\`\`\`

## Source Release
Original DAML release: https://github.com/digital-asset/daml/releases/tag/${damlTag}

🤖 Auto-generated by GitHub Actions`;
              
              // Write release notes to file
              require("fs").writeFileSync("release-notes.md", releaseNotes);
              
              try {
                execSync(`gh release create "${tag}" --title "${releaseTitle}" --notes-file release-notes.md ${isPrerelease}`, { stdio: "inherit" });
                console.log(`✅ Created GitHub release for ${tag}`);
              } catch (error) {
                console.error(`❌ Failed to create release for ${tag}: ${error.message}`);
              }
            }
            
            if (createdTags.length > 0) {
              console.log(`\nCreated ${createdTags.length} new tagged releases`);
            } else {
              console.log("\nNo new tags to create");
            }
          '

      - name: Create summary
        if: always()
        run: |
          echo "## Canton Version Manifest Update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.update-manifest.outputs.manifest_updated }}" == "true" ]; then
            echo "✅ **Manifest Updated**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show latest versions
            echo "### Latest Canton Versions" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            bun -e '
              const manifest = require("./canton-versions.json");
              const versions = Object.entries(manifest.versions).slice(0, 5);
              versions.forEach(([tag, info]) => {
                const type = info.is_prerelease ? "pre-release" : "stable";
                console.log(`${tag} - ${info.canton_version} (${type})`);
              });
            ' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **No updates needed** - Manifest is already up to date" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Manifest Statistics" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          bun -e '
            const manifest = require("./canton-versions.json");
            const total = Object.keys(manifest.versions).length;
            const prerelease = Object.values(manifest.versions).filter(v => v.is_prerelease).length;
            const stable = total - prerelease;
            console.log(`Total versions: ${total}`);
            console.log(`Pre-releases: ${prerelease}`);
            console.log(`Stable releases: ${stable}`);
            console.log(`Last updated: ${manifest.updated_at}`);
          ' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Recent Tags" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git tag -l "canton-*" | tail -5 >> $GITHUB_STEP_SUMMARY || echo "No tags yet" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY