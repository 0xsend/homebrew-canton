name: Update Canton Version Manifest

on:
  schedule:
    # Run every 12 hours
    - cron: "0 */12 * * *"
  workflow_dispatch: # Allow manual triggering
  push:
    branches:
      - main
    paths:
      - 'scripts/**'
      - '.github/workflows/update-canton.yml'

jobs:
  update-manifest:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          fetch-tags: true

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install GitHub CLI
        run: |
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          else
            echo "GitHub CLI already installed"
          fi

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update canton-versions.json manifest
        id: update-manifest
        run: |
          echo "📦 Updating Canton version manifest..."
          
          # Generate manifest with top 20 releases
          bun run scripts/generate-version-manifest.ts 20
          
          # Check if manifest was modified
          if git diff --quiet canton-versions.json; then
            echo "✅ Manifest is already up to date"
            echo "manifest_updated=false" >> $GITHUB_OUTPUT
          else
            echo "📝 Manifest was updated with new versions"
            echo "manifest_updated=true" >> $GITHUB_OUTPUT
            
            # Show what changed
            echo "Changes:"
            git diff --stat canton-versions.json
          fi

      - name: Verify SHA256 hashes
        if: steps.update-manifest.outputs.manifest_updated == 'true'
        run: |
          echo "🔐 Verifying SHA256 hashes in manifest..."
          bun run scripts/verify-sha256.ts 3

      - name: Generate formulas for new releases
        if: steps.update-manifest.outputs.manifest_updated == 'true'
        id: generate-formulas
        run: |
          echo "🏗️ Generating formulas for new releases..."
          # This script generates versioned formulas for new releases
          # and updates the main formula to point to the latest version
          bun run scripts/generate-formulas-for-new-releases.ts

      - name: Commit and push changes
        if: steps.update-manifest.outputs.manifest_updated == 'true'
        run: |
          # Add all changes
          git add canton-versions.json
          git add Formula/canton.rb
          git add Formula/canton.rb.template
          git add Formula/canton@*.rb 2>/dev/null || true

          # Check if there are changes to commit
          if ! git diff --cached --quiet; then
            # Get summary of changes
            NEW_VERSIONS=$(git diff --cached canton-versions.json | grep '^+.*"v3\.' | wc -l || echo "0")
            NEW_FORMULAS=$(ls Formula/canton@*.rb 2>/dev/null | wc -l || echo "0")

            # Create commit message with proper formatting
            git commit -m "chore: update Canton version manifest and formulas" \
              -m "" \
              -m "- Updated canton-versions.json with new versions" \
              -m "- Verified SHA256 hashes for latest releases" \
              -m "- Generated/updated main formula for latest version" \
              -m "- Generated $NEW_FORMULAS versioned formula(s)" \
              -m "" \
              -m "🤖 Generated by GitHub Actions [skip ci]"
            
            git push
            echo "✅ Changes pushed to repository"
          else
            echo "ℹ️ No changes to commit"
          fi

      - name: Create tagged releases for new Canton versions
        if: steps.update-manifest.outputs.manifest_updated == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🏷️ Creating tagged releases for new Canton versions..."
          
          # Get existing tags
          EXISTING_TAGS=$(git tag -l "canton-*" | tr '\n' ' ')
          echo "Existing tags: $EXISTING_TAGS"
          
          # Run the script to create GitHub releases
          bun run scripts/create-github-releases.ts

      - name: Create summary
        if: always()
        run: |
          echo "## Canton Version Manifest Update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.update-manifest.outputs.manifest_updated }}" == "true" ]; then
            echo "✅ **Manifest Updated**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show latest versions
            echo "### Latest Canton Versions" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            bun run scripts/show-latest-versions.ts >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **No updates needed** - Manifest is already up to date" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Manifest Statistics" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          bun run scripts/show-manifest-stats.ts >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Recent Tags" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git tag -l "canton-*" | tail -5 >> $GITHUB_STEP_SUMMARY || echo "No tags yet" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY