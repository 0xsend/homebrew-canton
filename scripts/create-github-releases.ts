#!/usr/bin/env bun

const manifest = require("../canton-versions.json");
const { execSync } = require("child_process");

// Check top 5 versions for new tags
const versions = Object.entries(manifest.versions).slice(0, 5);
let createdTags = [];

for (const [damlTag, info] of versions) {
  const tagName = `canton-${damlTag}-${info.canton_version}`;
  
  try {
    // Check if tag exists
    execSync(`git rev-parse --verify refs/tags/${tagName}`, { stdio: "ignore" });
    console.log(`Tag ${tagName} already exists`);
  } catch {
    // Tag does not exist, create it
    console.log(`Creating tag: ${tagName}`);
    
    try {
      // Create and push tag
      execSync(`git tag ${tagName}`);
      execSync(`git push origin ${tagName}`);
      createdTags.push({ tag: tagName, damlTag, info });
      console.log(`✅ Created tag: ${tagName}`);
    } catch (error) {
      console.error(`❌ Failed to create tag ${tagName}: ${error.message}`);
    }
  }
}

// Create GitHub releases for new tags
for (const { tag, damlTag, info } of createdTags) {
  const releaseTitle = `Canton ${info.canton_version} (DAML ${damlTag})`;
  const isPrerelease = info.is_prerelease ? "--prerelease" : "";
  
  // Create release notes file
  const releaseNotes = `Homebrew formula for Canton version ${info.canton_version} from DAML release ${damlTag}.

This release tracks the Canton release from Digital Asset:
- DAML Release: ${damlTag}
- Canton Version: ${info.canton_version}
- SHA256: ${info.sha256}
- Type: ${info.is_prerelease ? "Pre-release" : "Stable"}

## Installation

\`\`\`bash
# Using tap
brew tap 0xsend/homebrew-canton
brew install canton@${damlTag.replace(/^v/, "")}

# Or directly
brew install 0xsend/homebrew-canton/canton@${damlTag.replace(/^v/, "")}
\`\`\`

## Source Release
Original DAML release: https://github.com/digital-asset/daml/releases/tag/${damlTag}

🤖 Auto-generated by GitHub Actions`;
  
  // Write release notes to file
  require("fs").writeFileSync("release-notes.md", releaseNotes);
  
  try {
    execSync(`gh release create "${tag}" --title "${releaseTitle}" --notes-file release-notes.md ${isPrerelease}`, { stdio: "inherit" });
    console.log(`✅ Created GitHub release for ${tag}`);
  } catch (error) {
    console.error(`❌ Failed to create release for ${tag}: ${error.message}`);
  }
}

if (createdTags.length > 0) {
  console.log(`\nCreated ${createdTags.length} new tagged releases`);
} else {
  console.log("\nNo new tags to create");
}